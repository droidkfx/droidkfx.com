AWSTemplateFormatVersion: "2010-09-09"
Description: "Droidkfx.com cloudformation template"
Parameters:
  DomainName:
    Type: String
    Description: "Domain name for the website"
    AllowedPattern: "(?!-)[A-Za-z0-9-.]{1,63}(?<!-)"
    ConstraintDescription: "Must be a valid domain name."
#  HostedZoneId:
#    Type: String
#    Description: "Hosted zone ID for the domain"
#    Default: "Z1234567890"
#    ConstraintDescription: "Must be a valid hosted zone ID."
Outputs:
  InternalWebsiteUrl:
    Description: "URL for website"
    Value: !GetAtt SiteContentBucket.WebsiteURL
Resources:
  SiteContentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: index.html
  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteContentBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - !GetAtt SiteContentBucket.Arn
              - !Join [ '/', [ !GetAtt SiteContentBucket.Arn, '*' ] ]
            Principal: '*'

  # Based on the implementation here: https://cjohansen.no/aws-apigw-proxy-cloudformation/
  GatewayApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: DroidKfxApi
  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt GatewayApi.RootResourceId
      RestApiId: !Ref GatewayApi
      PathPart: '{proxy+}'
  RootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt GatewayApi.RootResourceId
      RestApiId: !Ref GatewayApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !GetAtt SiteContentBucket.WebsiteURL
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  ProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref GatewayApi
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Join [ '/', [ !GetAtt SiteContentBucket.WebsiteURL, '{proxy}' ] ]
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
  Deployment:
    DependsOn:
      - RootMethod
      - ProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref GatewayApi
      StageName: dev


